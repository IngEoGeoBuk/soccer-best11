// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  posts    Post[]
  comments Comment[]
  replies  Reply[]
  likes     Like[]
}

model Post {
  id          Int       @id @default(autoincrement())
  userId      String
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  
  comments     Comment[]
  replies      Reply[]
  likes        Like[]
  postPlayers  PostPlayer[]
}

model PostPlayer {
  id          Int       @id @default(autoincrement())
  postId      Int
  playerId    Int

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    String
  postId    Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime? @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  replies Reply[]
}

model Reply {
  id        Int       @id @default(autoincrement())
  userId    String
  postId    Int
  commentId Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int       @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Player {
  id          Int       @id
  name        String
  nationality String
  club        String
}